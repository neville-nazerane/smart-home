
pool:
  vmImage: ubuntu-latest

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - src/SmartHome.BackgroundProcessor
      - pipelines/background.yaml

parameters:
- name: projectPath
  type: string
  default: src/SmartHome.BackgroundProcessor

- name: projectName
  type: string
  default: SmartHome.BackgroundProcessor

- name: destDirectory
  type: string 
  default: /var/www/background

- name: service
  type: object
  default:
    description: Background
    identifier: background
    name: kestrel-background

    
variables:
  
  - group: smarthub

  - name: serviceTemplate
    value:  |
      [Unit]
      Description=${{ parameters.service.description }}

      [Install]
      WantedBy=multi-user.target

      [Service]
      WorkingDirectory=${{ parameters.destDirectory }}
      ExecStart=/usr/bin/dotnet ${{ parameters.destDirectory }}/${{ parameters.projectName }}.dll
      Restart=always
      # Restart service after 10 seconds if the dotnet service crashes:
      RestartSec=10
      KillSignal=SIGINT
      SyslogIdentifier=${{ parameters.service.identifier }}
      User=www-data



stages:
  - stage: CI
    jobs:
      - job: Compile
        steps:

        - task: UseDotNet@2
          displayName: 'Use .NET Core sdk'
          inputs:
            packageType: sdk
            includePreviewVersions: true
            version: 7.x
            installationPath: $(Agent.ToolsDirectory)/dotnet
        
        - script: dotnet publish ${{ parameters.projectPath }} -c release -o published
          displayName: Publishing background process

        - task: ArchiveFiles@2
          displayName: Compress before publish
          inputs:
            rootFolderOrFile: published
            includeRootFolder: false
            archiveFile: compressed/${{ parameters.projectName }}.zip
            verbose: true

        - publish: compressed
          displayName: Publish for release
          artifact: published

  - stage: DeployDev
    displayName: Deploy to the PI

    jobs:
      - deployment: DeployLAN
        displayName: Deploy to Development VM
        environment:
          name: voice pi
          resourceType: VirtualMachine
          resourceName: ubuntu
        strategy:
          runOnce:
            deploy:
              steps:
                
                - checkout: none

                - download: current
                  displayName: download published artifact
                  artifact: published

                - script: echo "$(serviceTemplate)" > $(Pipeline.Workspace)/published/linux.service
                  displayName: Generate service file

                - template: config-template.yml

                - script: |
                    sudo rm -rf ${{ parameters.destDirectory }}
                    sudo unzip ${{ parameters.projectName }}.zip -d ${{ parameters.destDirectory }}

                    sudo mv linux.service /etc/systemd/system/${{ parameters.service.name }}.service -f

                    sudo systemctl enable ${{ parameters.service.name }}.service 
                    sudo systemctl stop ${{ parameters.service.name }}.service 
                    sudo systemctl start ${{ parameters.service.name }}.service
  
                    rm -rf *
                  displayName: Updating website
                  workingDirectory: $(Pipeline.Workspace)/published
      
                - task: DeleteFiles@1
                  displayName: Clean up
            
    